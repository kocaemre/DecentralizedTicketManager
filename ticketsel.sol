// SPDX-License-Identifier: GPL-3.0




pragma solidity >=0.8.1 <0.9.0;



contract ticketCreator{
    mapping(address => address) get_Contract;

    event contractCreated (address user,address contractAdress);

    // Function to create a new contract
    function create_contract() public returns(address){

        ticketseller new_ticketseller = new ticketseller(msg.sender);

        get_Contract[msg.sender] = address(new_ticketseller);

        return get_Contract[msg.sender];
    }
    // Function to see the created contract
    function seeContract() public view returns(address){
        return get_Contract[msg.sender];
    }

}





contract ticketseller{

    address public owner;

    mapping (address => uint) userBalances;

    mapping (address => string) orders; 

    mapping (uint => bool) public seatStatus; //if false,seat avaliable

    consertInformations public concert;

    bool private is_event_published;

    string private ticket_hash = "";

    event concertCreated(string name,uint seat_numbers,uint price);

    event ticketCreated(address msg_sender,string hash_code);

    

    struct consertInformations{
        string name;
        uint seat_numbers;
        uint price;
    }

    constructor(address eoa){
        owner = eoa;

    }

    modifier onlyOwner{
        require(msg.sender == owner,"You are not owner");
        _;
    }

    function get_Balance() public view returns(uint) {
        return userBalances[msg.sender];
    }

    
    function get_Balance_global() public view onlyOwner returns (uint) {
        return address(this).balance;
    }

    function createconcert(string memory _name,uint _seat_numbers,uint _price) public onlyOwner {

        require(is_event_published==false,"Please reset the event");
        concert.name = _name;
        concert.seat_numbers = _seat_numbers;
        concert.price = _price;

        is_event_published = true;

        emit concertCreated(concert.name,concert.seat_numbers,concert.price);

    }

    function deposit() payable public{
        require(msg.value > 0);
        userBalances[msg.sender] += msg.value;
    }

    receive() payable external{
        deposit();
    }

    function withdraw(uint _money) public{
        require(userBalances[msg.sender] > _money && _money > 0,"You dont have money");
        address payable recipient = payable(msg.sender);
        uint money = _money;
        userBalances[msg.sender] -= money;

        recipient.transfer(money);
        
    }

    function buyTicket(uint seatNo) public returns(string memory){
        require(userBalances[msg.sender] >= concert.price);
        require(seatNo <= concert.seat_numbers && seatNo > 0,"Error code : 1");
        require(seatStatus[seatNo] == false,"Error code : 2");
        require(is_event_published == true,"Error code : 3");

        userBalances[msg.sender] -= concert.price;

        seatStatus[seatNo] = true;

        emit ticketCreated(msg.sender,ticket_hash);
        return ticket_hash;
    }

    function kioskMode(uint seatNo,address customer) public onlyOwner() returns(string memory){
        require(userBalances[customer] >= concert.price);
        require(seatNo <= concert.seat_numbers && seatNo > 0,"Error code : 1");
        require(seatStatus[seatNo] == false,"Error code : 2");
        require(is_event_published == true,"Error code : 3");

        userBalances[customer] -= concert.price;

        seatStatus[seatNo] = true;
        return ticket_hash;
    }

    function closeEvent() public onlyOwner{
        is_event_published = false;
    }




    

    

    











}